
syntax = "proto3";
package gink;

/**
    This proto is only used in the typescript/javascript implementation.
    Currently that implementation just uses an append-only logfile and
    re-reads it on startup everytime rather than using something more
    structured.
*/
message LogFile {
    /**
        The writer must ensure that all commits per chain are in order
        and that there are no gaps in any of the chains.  Storing the
        bytes of the commit so that it's forward compatible and doesn't
        drop unknown proto fields.
    */
    repeated bytes commits = 1;

    /**
        Each database instance may have one or more chains that it
        can append commits to.  When a process opens a database, if
        no previously claimed chains are available, it can create a
        new chain.  If the process that created a chain no long exists,
        then that chain may be reclaimed by a new processes.

        Processes should lock the log file and make sure it's read
        all data written to it before reclaiming a chain to avoid
        conflicting ownership claims being entered.
    */
    message ChainEntry {
        uint64 medallion = 1;
        uint64 chain_start = 2;
        uint64 process_id = 3;
        uint64 claim_time = 4;
    }
    repeated ChainEntry chain_entries = 2;
}
